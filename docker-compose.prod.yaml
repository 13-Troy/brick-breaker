version: "3"
services:
  proxy:
    image: nginx:1.22-alpine
    container_name: proxy
    ports:
      - "443:443"
      - "8080:80"
    depends_on:
      - main
    env_file:
      - ./prod.env
    volumes:
      - ./nginx-confs/conf.d/proxy.dev.conf:/etc/nginx/conf.d/proxy.conf
      - ./nginx-confs/conf.d/headers:/etc/nginx/conf.d/headers
      - ./nginx-confs/conf.d/redirect:/etc/nginx/conf.d/redirect
#      - ./nginx-confs/conf.d/ssl:/etc/nginx/conf.d/ssl
  #      - ./nginx-confs/ssl/:/etc/ssl/
  #      - ./nginx-confs/error:/var/log/nginx/error
    restart: unless-stopped
    networks:
      - awesome
    command: [nginx-debug, '-g', 'daemon off;']

  postgres:
    container_name: brick_game_db # Можно и не указывать, тогда будет взято за основу название сервиса: `postgres`
    image: postgres:12
    ports:
      - "5432:5432"
    volumes:
      - ./postgresdata:/var/lib/postgresql/data
      # Если у вас есть схема БД, которую можно подгрузить на старте, — передайте её
      # - ./src/migrations/dbinit.sql:/docker-entrypoint-initdb.d/dbinit.sql
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: newPassword
      POSTGRES_DB: brick-game-db
    networks:
      - awesome

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:4.18
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: secret
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "8081:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - awesome
  main:
    env_file:
      ./prod.env
    # Этим ключом мы скажем docker-compose, чтобы он собирал докерфайл, который
    # находится в папке рядом с docker-compose.yaml
    build:
      context: .
      dockerfile: Dockerfile.prod
    # Проброс порта так же, как в командной строке — на какой порт хоста какой порт контейнера
    ports:
      - "5000:5000"
    # Зависимость от сервиса postgres и pgadmin
    depends_on:
      - postgres
      - pgadmin
    restart: always
    # Важно добавить сеть всем сервисам, которые должны взаимодействовать между собой
    networks:
      - awesome
    # command: ./wait-for.sh postgres:5432 -- npm run start

volumes:
  pgadmin-data:
# Настройки созданной сети между сервисами
networks:
  awesome:
    driver: bridge
