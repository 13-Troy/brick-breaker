version: "3"
services:

  postgres:
    container_name: brick_game_db # Можно и не указывать, тогда будет взято за основу название сервиса: `postgres`
    image: postgres:12
    ports:
      - "5432:5432"
    volumes:
      - ./postgresdata:/var/lib/postgresql/data
      # Если у вас есть схема БД, которую можно подгрузить на старте, — передайте её
      # - ./src/migrations/dbinit.sql:/docker-entrypoint-initdb.d/dbinit.sql
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: newPassword
      POSTGRES_DB: brick-game-db
    networks:
      - awesome

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:4.18
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: secret
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "8081:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - awesome
  main:
    env_file:
      ./dev.env
    # Этим ключом мы скажем docker-compose, чтобы он собирал докерфайл, который
    # находится в папке рядом с docker-compose.yaml
    build:
      context: .
    # Проброс порта так же, как в командной строке — на какой порт хоста какой порт контейнера
    ports:
      - "80:5000"
      - "443:8080"
    # Зависимость от сервиса postgres и pgadmin
    depends_on:
      - postgres
      - pgadmin
    restart: always
    volumes:
      - ./client:/var/www/client
      - ./dist:/var/www/dist
    # Важно добавить сеть всем сервисам, которые должны взаимодействовать между собой
    networks:
      - awesome
    # command: ./wait-for.sh postgres:5432 -- npm run start

volumes:
  pgadmin-data:
  client:
  dist:
# Настройки созданной сети между сервисами
networks:
  awesome:
    driver: bridge
